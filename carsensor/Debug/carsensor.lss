
carsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000dd0  00000e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  00000e76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022b9  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ccd  00000000  00000000  0000338d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001054  00000000  00000000  0000405a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  000050b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000737  00000000  00000000  00005468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8f  00000000  00000000  00005b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006b2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 03 	call	0x726	; 0x726 <main>
  8a:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
			  Direction which will be (DIO_PINOUT, DIO_PININ
  return     void 
*/			    
void DIO_SetPinDirection( u8 PORT, u8 PIN, u8 Direction)
{
	switch(PORT)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_SetPinDirection+0x4a>
  96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_SetPinDirection+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	e1 f1       	breq	.+120    	; 0x114 <DIO_SetPinDirection+0x82>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_SetPinDirection+0x10>
  a0:	55 c0       	rjmp	.+170    	; 0x14c <DIO_SetPinDirection+0xba>
  a2:	08 95       	ret
	{
		case DIO_PORTA:
		switch(Direction)
  a4:	44 23       	and	r20, r20
  a6:	19 f0       	breq	.+6      	; 0xae <DIO_SetPinDirection+0x1c>
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f0       	breq	.+26     	; 0xc6 <DIO_SetPinDirection+0x34>
  ac:	08 95       	ret
		{
			case DIO_INPUT:
			Clear_bit(PORTA_DIR_REG, PIN);
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_SetPinDirection+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_SetPinDirection+0x24>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
			break;
  c4:	08 95       	ret
			
			case DIO_OUTPUT:
			Set_bit(PORTA_DIR_REG, PIN);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDirection+0x40>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDirection+0x3c>
  d6:	82 2b       	or	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
			break;
  da:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PORTB:
		switch(Direction)
  dc:	44 23       	and	r20, r20
  de:	19 f0       	breq	.+6      	; 0xe6 <DIO_SetPinDirection+0x54>
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	69 f0       	breq	.+26     	; 0xfe <DIO_SetPinDirection+0x6c>
  e4:	08 95       	ret
		{
			case DIO_INPUT:
			Clear_bit(PORTB_DIR_REG, PIN);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDirection+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDirection+0x5c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
			break;
  fc:	08 95       	ret
			
			case DIO_OUTPUT:
			Set_bit(PORTB_DIR_REG, PIN);
  fe:	27 b3       	in	r18, 0x17	; 23
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDirection+0x78>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDirection+0x74>
 10e:	82 2b       	or	r24, r18
 110:	87 bb       	out	0x17, r24	; 23
			break;
 112:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PORTC:
		switch(Direction)
 114:	44 23       	and	r20, r20
 116:	19 f0       	breq	.+6      	; 0x11e <DIO_SetPinDirection+0x8c>
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	69 f0       	breq	.+26     	; 0x136 <DIO_SetPinDirection+0xa4>
 11c:	08 95       	ret
		{
			case DIO_INPUT:
			Clear_bit(PORTC_DIR_REG, PIN);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0x94>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
			break;
 134:	08 95       	ret
			
			case DIO_OUTPUT:
			Set_bit(PORTC_DIR_REG, PIN);
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDirection+0xb0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDirection+0xac>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
			break;
 14a:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PORTD:
		switch(Direction)
 14c:	44 23       	and	r20, r20
 14e:	19 f0       	breq	.+6      	; 0x156 <DIO_SetPinDirection+0xc4>
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f0       	breq	.+26     	; 0x16e <DIO_SetPinDirection+0xdc>
 154:	08 95       	ret
		{
			case DIO_INPUT:
			Clear_bit(PORTD_DIR_REG, PIN);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDirection+0xd0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDirection+0xcc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
			break;
 16c:	08 95       	ret
			
			case DIO_OUTPUT:
			Set_bit(PORTD_DIR_REG, PIN);
 16e:	21 b3       	in	r18, 0x11	; 17
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_SetPinDirection+0xe8>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_SetPinDirection+0xe4>
 17e:	82 2b       	or	r24, r18
 180:	81 bb       	out	0x11, r24	; 17
 182:	08 95       	ret

00000184 <DIO_WritePinValue>:
			  Value which will be (DIO_PINHIGH, DIO_PINLOW)
  return     void 
*/
void DIO_WritePinValue(u8 PORT, u8 PIN, u8 Value)
{
	switch(PORT)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	19 f1       	breq	.+70     	; 0x1ce <DIO_WritePinValue+0x4a>
 188:	30 f0       	brcs	.+12     	; 0x196 <DIO_WritePinValue+0x12>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	e1 f1       	breq	.+120    	; 0x206 <DIO_WritePinValue+0x82>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	09 f4       	brne	.+2      	; 0x194 <DIO_WritePinValue+0x10>
 192:	54 c0       	rjmp	.+168    	; 0x23c <DIO_WritePinValue+0xb8>
 194:	08 95       	ret
	{
		case DIO_PORTA:
		switch(Value)
 196:	44 23       	and	r20, r20
 198:	71 f0       	breq	.+28     	; 0x1b6 <DIO_WritePinValue+0x32>
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	09 f0       	breq	.+2      	; 0x1a0 <DIO_WritePinValue+0x1c>
 19e:	68 c0       	rjmp	.+208    	; 0x270 <DIO_WritePinValue+0xec>
		{
			case DIO_HIGH:
			Set_bit(PORTA_OUT_REG, PIN);
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePinValue+0x28>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePinValue+0x24>
 1b0:	82 2b       	or	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
			break;
 1b4:	08 95       	ret
			
			case DIO_LOW:
			Clear_bit(PORTA_OUT_REG, PIN);
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePinValue+0x3e>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WritePinValue+0x3a>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
			break;
 1cc:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PORTB:
		switch(Value)
 1ce:	44 23       	and	r20, r20
 1d0:	71 f0       	breq	.+28     	; 0x1ee <DIO_WritePinValue+0x6a>
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_WritePinValue+0x54>
 1d6:	4c c0       	rjmp	.+152    	; 0x270 <DIO_WritePinValue+0xec>
		{
			case DIO_HIGH:
			Set_bit(PORTB_OUT_REG, PIN);
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_WritePinValue+0x60>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_WritePinValue+0x5c>
 1e8:	82 2b       	or	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
			break;
 1ec:	08 95       	ret
			
			case DIO_LOW:
			Clear_bit(PORTB_OUT_REG, PIN);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_WritePinValue+0x76>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_WritePinValue+0x72>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
			break;
 204:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PORTC:
		switch(Value)
 206:	44 23       	and	r20, r20
 208:	69 f0       	breq	.+26     	; 0x224 <DIO_WritePinValue+0xa0>
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	89 f5       	brne	.+98     	; 0x270 <DIO_WritePinValue+0xec>
		{
			case DIO_HIGH:
			Set_bit(PORTC_OUT_REG, PIN);
 20e:	25 b3       	in	r18, 0x15	; 21
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePinValue+0x96>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePinValue+0x92>
 21e:	82 2b       	or	r24, r18
 220:	85 bb       	out	0x15, r24	; 21
			break;
 222:	08 95       	ret
			
			case DIO_LOW:
			Clear_bit(PORTC_OUT_REG, PIN);
 224:	25 b3       	in	r18, 0x15	; 21
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_WritePinValue+0xac>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_WritePinValue+0xa8>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
			break;
 23a:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PORTD:
		switch(Value)
 23c:	44 23       	and	r20, r20
 23e:	69 f0       	breq	.+26     	; 0x25a <DIO_WritePinValue+0xd6>
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	b1 f4       	brne	.+44     	; 0x270 <DIO_WritePinValue+0xec>
		{
			case DIO_HIGH:
			Set_bit(PORTD_OUT_REG, PIN);
 244:	22 b3       	in	r18, 0x12	; 18
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_WritePinValue+0xcc>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_WritePinValue+0xc8>
 254:	82 2b       	or	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
			break;
 258:	08 95       	ret
			
			case DIO_LOW:
			Clear_bit(PORTD_OUT_REG, PIN);
 25a:	22 b3       	in	r18, 0x12	; 18
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_WritePinValue+0xe2>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_WritePinValue+0xde>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	82 bb       	out	0x12, r24	; 18
 270:	08 95       	ret

00000272 <EXTI_Init>:
	Clear_bit(GICR_reg,6);
}

void EXTI_SetCallback(void(*CopyFuncPtr)(void)){
	
	CallBackPtr=CopyFuncPtr;
 272:	85 b7       	in	r24, 0x35	; 53
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	85 bf       	out	0x35, r24	; 53
 278:	85 b7       	in	r24, 0x35	; 53
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	85 bf       	out	0x35, r24	; 53
 27e:	85 b7       	in	r24, 0x35	; 53
 280:	8b 7f       	andi	r24, 0xFB	; 251
 282:	85 bf       	out	0x35, r24	; 53
 284:	85 b7       	in	r24, 0x35	; 53
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	85 bf       	out	0x35, r24	; 53
 28a:	85 b7       	in	r24, 0x35	; 53
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	85 bf       	out	0x35, r24	; 53
 290:	85 b7       	in	r24, 0x35	; 53
 292:	84 60       	ori	r24, 0x04	; 4
 294:	85 bf       	out	0x35, r24	; 53
 296:	84 b7       	in	r24, 0x34	; 52
 298:	8f 7b       	andi	r24, 0xBF	; 191
 29a:	84 bf       	out	0x34, r24	; 52
 29c:	8b b7       	in	r24, 0x3b	; 59
 29e:	80 64       	ori	r24, 0x40	; 64
 2a0:	8b bf       	out	0x3b, r24	; 59
 2a2:	8b b7       	in	r24, 0x3b	; 59
 2a4:	8f 77       	andi	r24, 0x7F	; 127
 2a6:	8b bf       	out	0x3b, r24	; 59
 2a8:	8b b7       	in	r24, 0x3b	; 59
 2aa:	8f 7d       	andi	r24, 0xDF	; 223
 2ac:	8b bf       	out	0x3b, r24	; 59
 2ae:	8a b7       	in	r24, 0x3a	; 58
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	8a bf       	out	0x3a, r24	; 58
 2b4:	8a b7       	in	r24, 0x3a	; 58
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	8a bf       	out	0x3a, r24	; 58
 2ba:	8a b7       	in	r24, 0x3a	; 58
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	8a bf       	out	0x3a, r24	; 58
 2c0:	08 95       	ret

000002c2 <EXTI_EnableInt0>:
 2c2:	8b b7       	in	r24, 0x3b	; 59
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	8b bf       	out	0x3b, r24	; 59
 2c8:	08 95       	ret

000002ca <__vector_1>:
	
}


void __vector_1(void)__attribute__((signal,used));
void __vector_1(void){
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	if(CallBackPtr!= NULL)
 2ec:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 2f0:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 2f4:	30 97       	sbiw	r30, 0x00	; 0
 2f6:	09 f0       	breq	.+2      	; 0x2fa <__vector_1+0x30>
	CallBackPtr();
 2f8:	09 95       	icall
	
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <GIE_vidEnable>:
#include "GIE_int.h"


void GIE_vidEnable(void)
{
	SREG_reg |=(1<<7);
 31c:	8f b7       	in	r24, 0x3f	; 63
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	8f bf       	out	0x3f, r24	; 63
 322:	08 95       	ret

00000324 <__vector_9>:
void HCSR04_ISR(void){
	TimerOverflow++;
}
*/
ISR(TIMER1_OVF_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
 332:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <TimerOverflow>
 336:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <TimerOverflow+0x1>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <TimerOverflow+0x1>
 340:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <TimerOverflow>
}
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <HCSR04_init>:
void HCSR04_init () {
	
	//u32 Timer;
	
	
	DIO_SetPinDirection(E_PORT,E_PIN,DIO_INPUT);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_WritePinValue(E_PORT,E_PIN,DIO_HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	66 e0       	ldi	r22, 0x06	; 6
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_SetPinDirection(T_PORT,T_PIN,DIO_OUTPUT);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	
	EXTI_EnableInt0();
 370:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EXTI_EnableInt0>
	EXTI_Init();
 374:	0e 94 39 01 	call	0x272	; 0x272 <EXTI_Init>
	GIE_vidEnable();
 378:	0e 94 8e 01 	call	0x31c	; 0x31c <GIE_vidEnable>
	//EXTI_SetCallback(HCSR04_ISR);
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
 37c:	84 e0       	ldi	r24, 0x04	; 4
 37e:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
 380:	1f bc       	out	0x2f, r1	; 47
 382:	08 95       	ret

00000384 <HCSR04_Getdist>:
	
int HCSR04_Getdist(){
	
	int count;
	int Distance;
	DIO_WritePinValue(T_PORT,T_PIN,DIO_HIGH);
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2a e1       	ldi	r18, 0x1A	; 26
 390:	2a 95       	dec	r18
 392:	f1 f7       	brne	.-4      	; 0x390 <HCSR04_Getdist+0xc>
 394:	00 c0       	rjmp	.+0      	; 0x396 <HCSR04_Getdist+0x12>
	_delay_us(10);
	DIO_WritePinValue(T_PORT,T_PIN,DIO_LOW);
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	TCNT1 = 0;	/* Clear Timer counter */
 3a0:	1d bc       	out	0x2d, r1	; 45
 3a2:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
 3a4:	81 e4       	ldi	r24, 0x41	; 65
 3a6:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 3a8:	80 e2       	ldi	r24, 0x20	; 32
 3aa:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	88 bf       	out	0x38, r24	; 56
	
	while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
 3b0:	08 b6       	in	r0, 0x38	; 56
 3b2:	05 fe       	sbrs	r0, 5
 3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <HCSR04_Getdist+0x2c>
	TCNT1 = 0;	/* Clear Timer counter */
 3b6:	1d bc       	out	0x2d, r1	; 45
 3b8:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 3be:	80 e2       	ldi	r24, 0x20	; 32
 3c0:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	88 bf       	out	0x38, r24	; 56
	TimerOverflow = 0;/* Clear Timer overflow count */
 3c6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <TimerOverflow+0x1>
 3ca:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <TimerOverflow>
	
	
	while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
 3ce:	08 b6       	in	r0, 0x38	; 56
 3d0:	05 fe       	sbrs	r0, 5
 3d2:	fd cf       	rjmp	.-6      	; 0x3ce <HCSR04_Getdist+0x4a>
	count = (ICR1 + (65535 * TimerOverflow));	/* Take count */
 3d4:	66 b5       	in	r22, 0x26	; 38
 3d6:	77 b5       	in	r23, 0x27	; 39
 3d8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <TimerOverflow>
 3dc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <TimerOverflow+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	3f ef       	ldi	r19, 0xFF	; 255
 3e2:	40 e7       	ldi	r20, 0x70	; 112
 3e4:	22 e0       	ldi	r18, 0x02	; 2
 3e6:	31 50       	subi	r19, 0x01	; 1
 3e8:	40 40       	sbci	r20, 0x00	; 0
 3ea:	20 40       	sbci	r18, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <HCSR04_Getdist+0x62>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <HCSR04_Getdist+0x6c>
 3f0:	00 00       	nop
	/* 8MHz Timer freq, sound speed =343 m/s */
	Distance = ((int)count / 466.47)+1;
	_delay_ms(100);

return Distance;
 3f2:	68 1b       	sub	r22, r24
 3f4:	79 0b       	sbc	r23, r25
 3f6:	07 2e       	mov	r0, r23
 3f8:	00 0c       	add	r0, r0
 3fa:	88 0b       	sbc	r24, r24
 3fc:	99 0b       	sbc	r25, r25
 3fe:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 402:	29 e2       	ldi	r18, 0x29	; 41
 404:	3c e3       	ldi	r19, 0x3C	; 60
 406:	49 ee       	ldi	r20, 0xE9	; 233
 408:	53 e4       	ldi	r21, 0x43	; 67
 40a:	0e 94 70 05 	call	0xae0	; 0xae0 <__divsf3>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e8       	ldi	r20, 0x80	; 128
 414:	5f e3       	ldi	r21, 0x3F	; 63
 416:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3>
 41a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fixsfsi>

}	
 41e:	cb 01       	movw	r24, r22
 420:	08 95       	ret

00000422 <LCD_Cmd>:
	
	
	InitStepFinished=1;
}

void LCD_Cmd(u8 cmd){
 422:	cf 93       	push	r28
 424:	c8 2f       	mov	r28, r24
	
	DIO_WritePinValue(DIO_PORTB,RS,DIO_LOW);
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTB,RW,DIO_LOW);
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	
	DIO_WritePinValue(DIO_PORTA,D1,Get_bit(cmd,4));
 43a:	c4 fb       	bst	r28, 4
 43c:	44 27       	eor	r20, r20
 43e:	40 f9       	bld	r20, 0
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D2,Get_bit(cmd,5));
 448:	c5 fb       	bst	r28, 5
 44a:	44 27       	eor	r20, r20
 44c:	40 f9       	bld	r20, 0
 44e:	65 e0       	ldi	r22, 0x05	; 5
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D3,Get_bit(cmd,6));
 456:	c6 fb       	bst	r28, 6
 458:	44 27       	eor	r20, r20
 45a:	40 f9       	bld	r20, 0
 45c:	66 e0       	ldi	r22, 0x06	; 6
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D4,Get_bit(cmd,7));
 464:	4c 2f       	mov	r20, r28
 466:	44 1f       	adc	r20, r20
 468:	44 27       	eor	r20, r20
 46a:	44 1f       	adc	r20, r20
 46c:	67 e0       	ldi	r22, 0x07	; 7
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	DIO_WritePinValue(DIO_PORTB,E,DIO_HIGH);
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 47e:	89 ef       	ldi	r24, 0xF9	; 249
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_Cmd+0x60>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_Cmd+0x66>
 488:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinValue(DIO_PORTB,E,DIO_LOW);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	63 e0       	ldi	r22, 0x03	; 3
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	if(InitStepFinished)
 494:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <InitStepFinished>
 498:	88 23       	and	r24, r24
 49a:	59 f1       	breq	.+86     	; 0x4f2 <LCD_Cmd+0xd0>
	{
		
	DIO_WritePinValue(DIO_PORTA,D1,Get_bit(cmd,0));
 49c:	4c 2f       	mov	r20, r28
 49e:	41 70       	andi	r20, 0x01	; 1
 4a0:	64 e0       	ldi	r22, 0x04	; 4
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D2,Get_bit(cmd,1));
 4a8:	c1 fb       	bst	r28, 1
 4aa:	44 27       	eor	r20, r20
 4ac:	40 f9       	bld	r20, 0
 4ae:	65 e0       	ldi	r22, 0x05	; 5
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D3,Get_bit(cmd,2));
 4b6:	c2 fb       	bst	r28, 2
 4b8:	44 27       	eor	r20, r20
 4ba:	40 f9       	bld	r20, 0
 4bc:	66 e0       	ldi	r22, 0x06	; 6
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D4,Get_bit(cmd,3));
 4c4:	c3 fb       	bst	r28, 3
 4c6:	44 27       	eor	r20, r20
 4c8:	40 f9       	bld	r20, 0
 4ca:	67 e0       	ldi	r22, 0x07	; 7
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	DIO_WritePinValue(DIO_PORTB,E,DIO_HIGH);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	63 e0       	ldi	r22, 0x03	; 3
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 4dc:	89 ef       	ldi	r24, 0xF9	; 249
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_Cmd+0xbe>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_Cmd+0xc4>
 4e6:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinValue(DIO_PORTB,E,DIO_LOW);
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 4f2:	83 ef       	ldi	r24, 0xF3	; 243
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCD_Cmd+0xd4>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_Cmd+0xda>
 4fc:	00 00       	nop
	}
	_delay_ms(2);
	
}
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <LCD_Init>:

static u8 InitStepFinished=0;
void LCD_Init()
{
	
	DIO_SetPinDirection(DIO_PORTA, D1, DIO_OUTPUT);
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA, D2, DIO_OUTPUT);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	65 e0       	ldi	r22, 0x05	; 5
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA, D3, DIO_OUTPUT);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	66 e0       	ldi	r22, 0x06	; 6
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA, D4, DIO_OUTPUT);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	67 e0       	ldi	r22, 0x07	; 7
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, RS, DIO_OUTPUT);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, RW, DIO_OUTPUT);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,  E, DIO_OUTPUT);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 548:	8b e4       	ldi	r24, 0x4B	; 75
 54a:	9d e1       	ldi	r25, 0x1D	; 29
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_Init+0x4a>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_Init+0x50>
 552:	00 00       	nop
	
	_delay_ms(30);

    LCD_Cmd(0x20);
 554:	80 e2       	ldi	r24, 0x20	; 32
 556:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
	LCD_Cmd(0x20);
 55a:	80 e2       	ldi	r24, 0x20	; 32
 55c:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
	LCD_Cmd(0x80);
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
 566:	89 ef       	ldi	r24, 0xF9	; 249
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_Init+0x68>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_Init+0x6e>
 570:	00 00       	nop
	_delay_ms(1);
	
	LCD_Cmd(0x00);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
	LCD_Cmd(0xF0);
 578:	80 ef       	ldi	r24, 0xF0	; 240
 57a:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
 57e:	89 ef       	ldi	r24, 0xF9	; 249
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <LCD_Init+0x80>
 586:	00 c0       	rjmp	.+0      	; 0x588 <LCD_Init+0x86>
 588:	00 00       	nop
	_delay_ms(1);
	
	LCD_Cmd(0x00);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
	LCD_Cmd(0x00);
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
 596:	83 ef       	ldi	r24, 0xF3	; 243
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_Init+0x98>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_Init+0x9e>
 5a0:	00 00       	nop
	_delay_ms(2);
	
	
	
	InitStepFinished=1;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <InitStepFinished>
 5a8:	08 95       	ret

000005aa <LCD_WriteDATA>:
	}
	_delay_ms(2);
	
}

void LCD_WriteDATA(u8 Data){
 5aa:	cf 93       	push	r28
 5ac:	c8 2f       	mov	r28, r24
	
	DIO_WritePinValue(DIO_PORTB,RS,DIO_HIGH);
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTB,RW,DIO_LOW);
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	62 e0       	ldi	r22, 0x02	; 2
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	
	DIO_WritePinValue(DIO_PORTA,D1,Get_bit(Data,4));
 5c2:	c4 fb       	bst	r28, 4
 5c4:	44 27       	eor	r20, r20
 5c6:	40 f9       	bld	r20, 0
 5c8:	64 e0       	ldi	r22, 0x04	; 4
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D2,Get_bit(Data,5));
 5d0:	c5 fb       	bst	r28, 5
 5d2:	44 27       	eor	r20, r20
 5d4:	40 f9       	bld	r20, 0
 5d6:	65 e0       	ldi	r22, 0x05	; 5
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D3,Get_bit(Data,6));
 5de:	c6 fb       	bst	r28, 6
 5e0:	44 27       	eor	r20, r20
 5e2:	40 f9       	bld	r20, 0
 5e4:	66 e0       	ldi	r22, 0x06	; 6
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D4,Get_bit(Data,7));
 5ec:	4c 2f       	mov	r20, r28
 5ee:	44 1f       	adc	r20, r20
 5f0:	44 27       	eor	r20, r20
 5f2:	44 1f       	adc	r20, r20
 5f4:	67 e0       	ldi	r22, 0x07	; 7
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	DIO_WritePinValue(DIO_PORTB,E,DIO_HIGH);
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	63 e0       	ldi	r22, 0x03	; 3
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 606:	89 ef       	ldi	r24, 0xF9	; 249
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_WriteDATA+0x60>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_WriteDATA+0x66>
 610:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinValue(DIO_PORTB,E,DIO_LOW);
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	63 e0       	ldi	r22, 0x03	; 3
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	
	
		
	DIO_WritePinValue(DIO_PORTA,D1,Get_bit(Data,0));
 61c:	4c 2f       	mov	r20, r28
 61e:	41 70       	andi	r20, 0x01	; 1
 620:	64 e0       	ldi	r22, 0x04	; 4
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D2,Get_bit(Data,1));
 628:	c1 fb       	bst	r28, 1
 62a:	44 27       	eor	r20, r20
 62c:	40 f9       	bld	r20, 0
 62e:	65 e0       	ldi	r22, 0x05	; 5
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D3,Get_bit(Data,2));
 636:	c2 fb       	bst	r28, 2
 638:	44 27       	eor	r20, r20
 63a:	40 f9       	bld	r20, 0
 63c:	66 e0       	ldi	r22, 0x06	; 6
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	DIO_WritePinValue(DIO_PORTA,D4,Get_bit(Data,3));
 644:	c3 fb       	bst	r28, 3
 646:	44 27       	eor	r20, r20
 648:	40 f9       	bld	r20, 0
 64a:	67 e0       	ldi	r22, 0x07	; 7
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
		
	DIO_WritePinValue(DIO_PORTB,E,DIO_HIGH);
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	63 e0       	ldi	r22, 0x03	; 3
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 65c:	89 ef       	ldi	r24, 0xF9	; 249
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <LCD_WriteDATA+0xb6>
 664:	00 c0       	rjmp	.+0      	; 0x666 <LCD_WriteDATA+0xbc>
 666:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinValue(DIO_PORTB,E,DIO_LOW);
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	63 e0       	ldi	r22, 0x03	; 3
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 672:	83 ef       	ldi	r24, 0xF3	; 243
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <LCD_WriteDATA+0xcc>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_WriteDATA+0xd2>
 67c:	00 00       	nop
	
	_delay_ms(2);
	
	
	
}
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <LCD_GoToPos>:
	}
	
}
void LCD_GoToPos(u8 row,u8 col){
	u8 address;
	if(row<2 && col<16)
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	50 f4       	brcc	.+20     	; 0x69a <LCD_GoToPos+0x18>
 686:	60 31       	cpi	r22, 0x10	; 16
 688:	40 f4       	brcc	.+16     	; 0x69a <LCD_GoToPos+0x18>
	{
		address=(row * 0x40)+col;
 68a:	90 e4       	ldi	r25, 0x40	; 64
 68c:	89 9f       	mul	r24, r25
 68e:	60 0d       	add	r22, r0
 690:	11 24       	eor	r1, r1
 692:	86 2f       	mov	r24, r22
		address=Set_bit(address,7);
		LCD_Cmd(address);
 694:	80 68       	ori	r24, 0x80	; 128
 696:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Cmd>
 69a:	08 95       	ret

0000069c <LCD_WriteString>:
	_delay_ms(2);
	
	
	
}
void LCD_WriteString(u8 *Str,u8 row,u8 col){
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	6c 01       	movw	r12, r24
 6ae:	e6 2e       	mov	r14, r22
 6b0:	04 2f       	mov	r16, r20
	LCD_GoToPos(row,col);
 6b2:	64 2f       	mov	r22, r20
 6b4:	8e 2d       	mov	r24, r14
 6b6:	0e 94 41 03 	call	0x682	; 0x682 <LCD_GoToPos>
	u8 index=0;
	u8 line=0;
	
	while(Str[index]!='\0' && ((row*16)+(index + col)) <32)
 6ba:	80 e1       	ldi	r24, 0x10	; 16
 6bc:	e8 9e       	mul	r14, r24
 6be:	70 01       	movw	r14, r0
 6c0:	11 24       	eor	r1, r1
	
}
void LCD_WriteString(u8 *Str,u8 row,u8 col){
	LCD_GoToPos(row,col);
	u8 index=0;
	u8 line=0;
 6c2:	d0 e0       	ldi	r29, 0x00	; 0
	
	
}
void LCD_WriteString(u8 *Str,u8 row,u8 col){
	LCD_GoToPos(row,col);
	u8 index=0;
 6c4:	c0 e0       	ldi	r28, 0x00	; 0
	u8 line=0;
	
	while(Str[index]!='\0' && ((row*16)+(index + col)) <32)
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	17 c0       	rjmp	.+46     	; 0x6f8 <LCD_WriteString+0x5c>
	{
		if(((row*16)+(index + col))<16)
 6ca:	20 31       	cpi	r18, 0x10	; 16
 6cc:	31 05       	cpc	r19, r1
 6ce:	24 f4       	brge	.+8      	; 0x6d8 <LCD_WriteString+0x3c>
		{ LCD_WriteDATA(Str[index]);
 6d0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_WriteDATA>
		 index++;
 6d4:	cf 5f       	subi	r28, 0xFF	; 255
 6d6:	10 c0       	rjmp	.+32     	; 0x6f8 <LCD_WriteString+0x5c>
		}
		else if (((row*16)+(index + col))==16 && line ==0)
 6d8:	20 31       	cpi	r18, 0x10	; 16
 6da:	31 05       	cpc	r19, r1
 6dc:	41 f4       	brne	.+16     	; 0x6ee <LCD_WriteString+0x52>
 6de:	d1 11       	cpse	r29, r1
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <LCD_WriteString+0x52>
		{
			LCD_GoToPos(1,0);
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	0e 94 41 03 	call	0x682	; 0x682 <LCD_GoToPos>
			line++;
 6ea:	d1 e0       	ldi	r29, 0x01	; 1
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <LCD_WriteString+0x5c>
		}
		else if (((row*16)+(index + col))<32 && line==1)
 6ee:	d1 30       	cpi	r29, 0x01	; 1
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <LCD_WriteString+0x5c>
		{
			 LCD_WriteDATA(Str[index]);
 6f2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_WriteDATA>
			 index++;
 6f6:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_WriteString(u8 *Str,u8 row,u8 col){
	LCD_GoToPos(row,col);
	u8 index=0;
	u8 line=0;
	
	while(Str[index]!='\0' && ((row*16)+(index + col)) <32)
 6f8:	f6 01       	movw	r30, r12
 6fa:	ec 0f       	add	r30, r28
 6fc:	f1 1d       	adc	r31, r1
 6fe:	80 81       	ld	r24, Z
 700:	88 23       	and	r24, r24
 702:	41 f0       	breq	.+16     	; 0x714 <LCD_WriteString+0x78>
 704:	98 01       	movw	r18, r16
 706:	2c 0f       	add	r18, r28
 708:	31 1d       	adc	r19, r1
 70a:	2e 0d       	add	r18, r14
 70c:	3f 1d       	adc	r19, r15
 70e:	20 32       	cpi	r18, 0x20	; 32
 710:	31 05       	cpc	r19, r1
 712:	dc f2       	brlt	.-74     	; 0x6ca <LCD_WriteString+0x2e>
			 index++;
		}
		 
	}
	
}
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	df 90       	pop	r13
 722:	cf 90       	pop	r12
 724:	08 95       	ret

00000726 <main>:
#include <avr/delay.h>



int main(void)
{  
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	2a 97       	sbiw	r28, 0x0a	; 10
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
 742:	0e 94 81 02 	call	0x502	; 0x502 <LCD_Init>
	SERVO_INIT();
 746:	0e 94 aa 04 	call	0x954	; 0x954 <SERVO_INIT>
	MOTOR_Left_init();
 74a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <MOTOR_Left_init>
	MOTOR_Right_init();
 74e:	0e 94 89 04 	call	0x912	; 0x912 <MOTOR_Right_init>
	LCD_WriteString("Distance in cm =",0,0);
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	80 e6       	ldi	r24, 0x60	; 96
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
	HCSR04_init();
 75e:	0e 94 a9 01 	call	0x352	; 0x352 <HCSR04_init>
	
	 
    while (1) 
    {  
	
		Distancee=HCSR04_Getdist();
 762:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
 766:	8c 01       	movw	r16, r24
		itoa(Distancee,string,10);
 768:	4a e0       	ldi	r20, 0x0A	; 10
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	be 01       	movw	r22, r28
 76e:	6f 5f       	subi	r22, 0xFF	; 255
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	0e 94 a6 06 	call	0xd4c	; 0xd4c <itoa>
		LCD_WriteString(string,1,0);
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	ce 01       	movw	r24, r28
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
 782:	2f ef       	ldi	r18, 0xFF	; 255
 784:	81 ee       	ldi	r24, 0xE1	; 225
 786:	94 e0       	ldi	r25, 0x04	; 4
 788:	21 50       	subi	r18, 0x01	; 1
 78a:	80 40       	sbci	r24, 0x00	; 0
 78c:	90 40       	sbci	r25, 0x00	; 0
 78e:	e1 f7       	brne	.-8      	; 0x788 <main+0x62>
 790:	00 c0       	rjmp	.+0      	; 0x792 <main+0x6c>
 792:	00 00       	nop
		_delay_ms(200);
		MOTOR_Left_Forward();
 794:	0e 94 73 04 	call	0x8e6	; 0x8e6 <MOTOR_Left_Forward>
		MOTOR_Right_Forward();
 798:	0e 94 94 04 	call	0x928	; 0x928 <MOTOR_Right_Forward>
		if(Distancee<20 && Distancee>0)
 79c:	01 50       	subi	r16, 0x01	; 1
 79e:	11 09       	sbc	r17, r1
 7a0:	03 31       	cpi	r16, 0x13	; 19
 7a2:	11 05       	cpc	r17, r1
 7a4:	f0 f6       	brcc	.-68     	; 0x762 <main+0x3c>
		{
			MOTOR_Left_Stop();
 7a6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <MOTOR_Left_Stop>
			MOTOR_Right_Stop();
 7aa:	0e 94 9f 04 	call	0x93e	; 0x93e <MOTOR_Right_Stop>
			SERVO_ROT_RIGHT();
 7ae:	0e 94 b5 04 	call	0x96a	; 0x96a <SERVO_ROT_RIGHT>
			distright=HCSR04_Getdist();
 7b2:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
 7b6:	8c 01       	movw	r16, r24
			itoa(distright,string,10);
 7b8:	4a e0       	ldi	r20, 0x0A	; 10
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	be 01       	movw	r22, r28
 7be:	6f 5f       	subi	r22, 0xFF	; 255
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <itoa>
			LCD_WriteString(string,1,0);
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	ce 01       	movw	r24, r28
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
			SERVO_ROT_LEFT();
 7d2:	0e 94 cf 04 	call	0x99e	; 0x99e <SERVO_ROT_LEFT>
			distleft=HCSR04_Getdist();
 7d6:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
 7da:	7c 01       	movw	r14, r24
			itoa(distleft,string,10);
 7dc:	4a e0       	ldi	r20, 0x0A	; 10
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	be 01       	movw	r22, r28
 7e2:	6f 5f       	subi	r22, 0xFF	; 255
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <itoa>
			LCD_WriteString(string,1,0);
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	ce 01       	movw	r24, r28
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
			SERVO_ROT_FORWARD();
 7f6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <SERVO_ROT_FORWARD>
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	83 ed       	ldi	r24, 0xD3	; 211
 7fe:	90 e3       	ldi	r25, 0x30	; 48
 800:	21 50       	subi	r18, 0x01	; 1
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <main+0xda>
 808:	00 c0       	rjmp	.+0      	; 0x80a <main+0xe4>
 80a:	00 00       	nop
			_delay_ms(2000);
			Distancee=HCSR04_Getdist();
 80c:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
			itoa(Distancee,string,10);
 810:	4a e0       	ldi	r20, 0x0A	; 10
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	be 01       	movw	r22, r28
 816:	6f 5f       	subi	r22, 0xFF	; 255
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <itoa>
			LCD_WriteString(string,1,0);
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
			
			if (distright>=distleft && distright>=20)
 82a:	0e 15       	cp	r16, r14
 82c:	1f 05       	cpc	r17, r15
 82e:	00 f1       	brcs	.+64     	; 0x870 <__stack+0x11>
 830:	04 31       	cpi	r16, 0x14	; 20
 832:	11 05       	cpc	r17, r1
 834:	f0 f1       	brcs	.+124    	; 0x8b2 <__stack+0x53>
			{
			  MOTOR_Left_Forward();
 836:	0e 94 73 04 	call	0x8e6	; 0x8e6 <MOTOR_Left_Forward>
			  u16 rdist;
			  rdist=HCSR04_Getdist();
 83a:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
			  while(rdist<distright)
 83e:	80 17       	cp	r24, r16
 840:	91 07       	cpc	r25, r17
 842:	98 f4       	brcc	.+38     	; 0x86a <__stack+0xb>
			  {
				  rdist=HCSR04_Getdist();
 844:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
 848:	7c 01       	movw	r14, r24
				  itoa(rdist,string,10);
 84a:	4a e0       	ldi	r20, 0x0A	; 10
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	be 01       	movw	r22, r28
 850:	6f 5f       	subi	r22, 0xFF	; 255
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	0e 94 a6 06 	call	0xd4c	; 0xd4c <itoa>
				  LCD_WriteString(string,1,0);
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	61 e0       	ldi	r22, 0x01	; 1
 85c:	ce 01       	movw	r24, r28
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
			if (distright>=distleft && distright>=20)
			{
			  MOTOR_Left_Forward();
			  u16 rdist;
			  rdist=HCSR04_Getdist();
			  while(rdist<distright)
 864:	e0 16       	cp	r14, r16
 866:	f1 06       	cpc	r15, r17
 868:	68 f3       	brcs	.-38     	; 0x844 <main+0x11e>
				  rdist=HCSR04_Getdist();
				  itoa(rdist,string,10);
				  LCD_WriteString(string,1,0);
				  
			  }
			  MOTOR_Right_Forward();
 86a:	0e 94 94 04 	call	0x928	; 0x928 <MOTOR_Right_Forward>
			Distancee=HCSR04_Getdist();
			itoa(Distancee,string,10);
			LCD_WriteString(string,1,0);
			
			if (distright>=distleft && distright>=20)
			{
 86e:	79 cf       	rjmp	.-270    	; 0x762 <main+0x3c>
				  
			  }
			  MOTOR_Right_Forward();
			  	 
			}
			 else if (distleft>distright && distleft>=20)  
 870:	24 e1       	ldi	r18, 0x14	; 20
 872:	e2 16       	cp	r14, r18
 874:	f1 04       	cpc	r15, r1
 876:	e8 f0       	brcs	.+58     	; 0x8b2 <__stack+0x53>
			 {
				
				MOTOR_Right_Forward();
 878:	0e 94 94 04 	call	0x928	; 0x928 <MOTOR_Right_Forward>
				u16 ldist;
				ldist=HCSR04_Getdist();
 87c:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
				 while(ldist<distleft)
 880:	8e 15       	cp	r24, r14
 882:	9f 05       	cpc	r25, r15
 884:	98 f4       	brcc	.+38     	; 0x8ac <__stack+0x4d>
				 {
					 ldist=HCSR04_Getdist();
 886:	0e 94 c2 01 	call	0x384	; 0x384 <HCSR04_Getdist>
 88a:	8c 01       	movw	r16, r24
					 itoa(ldist,string,10);
 88c:	4a e0       	ldi	r20, 0x0A	; 10
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	be 01       	movw	r22, r28
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	0e 94 a6 06 	call	0xd4c	; 0xd4c <itoa>
					 LCD_WriteString(string,1,0);
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	61 e0       	ldi	r22, 0x01	; 1
 89e:	ce 01       	movw	r24, r28
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
			 {
				
				MOTOR_Right_Forward();
				u16 ldist;
				ldist=HCSR04_Getdist();
				 while(ldist<distleft)
 8a6:	0e 15       	cp	r16, r14
 8a8:	1f 05       	cpc	r17, r15
 8aa:	68 f3       	brcs	.-38     	; 0x886 <__stack+0x27>
					 ldist=HCSR04_Getdist();
					 itoa(ldist,string,10);
					 LCD_WriteString(string,1,0);
					 
				 }
				 MOTOR_Left_Forward();
 8ac:	0e 94 73 04 	call	0x8e6	; 0x8e6 <MOTOR_Left_Forward>
 8b0:	58 cf       	rjmp	.-336    	; 0x762 <main+0x3c>
		
	}
		

	
}
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	2a 96       	adiw	r28, 0x0a	; 10
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	de bf       	out	0x3e, r29	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	cd bf       	out	0x3d, r28	; 61
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	ef 90       	pop	r14
 8ce:	08 95       	ret

000008d0 <MOTOR_Left_init>:
#include "Motor.h"
#include "Motor_Config.h"

void MOTOR_Left_init(){
	
	DIO_SetPinDirection(Motor_Port,Motor_pin0,DIO_OUTPUT);
 8d0:	41 e0       	ldi	r20, 0x01	; 1
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	83 e0       	ldi	r24, 0x03	; 3
 8d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(Motor_Port,Motor_pin1,DIO_OUTPUT);
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	61 e0       	ldi	r22, 0x01	; 1
 8de:	83 e0       	ldi	r24, 0x03	; 3
 8e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 8e4:	08 95       	ret

000008e6 <MOTOR_Left_Forward>:
	
}
void MOTOR_Left_Forward(){
	DIO_SetPinDirection(Motor_Port,Motor_pin0,DIO_LOW);
 8e6:	40 e0       	ldi	r20, 0x00	; 0
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	83 e0       	ldi	r24, 0x03	; 3
 8ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(Motor_Port,Motor_pin1,DIO_HIGH);
 8f0:	41 e0       	ldi	r20, 0x01	; 1
 8f2:	61 e0       	ldi	r22, 0x01	; 1
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 8fa:	08 95       	ret

000008fc <MOTOR_Left_Stop>:
}

void MOTOR_Left_Stop(){
	DIO_SetPinDirection(Motor_Port,Motor_pin0,DIO_LOW);
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	83 e0       	ldi	r24, 0x03	; 3
 902:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(Motor_Port,Motor_pin1,DIO_LOW);
 906:	40 e0       	ldi	r20, 0x00	; 0
 908:	61 e0       	ldi	r22, 0x01	; 1
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 910:	08 95       	ret

00000912 <MOTOR_Right_init>:
#include "Motor_Right.h"
#include "Motor_Right_Config.h"

void MOTOR_Right_init(){
	
	DIO_SetPinDirection(Motor_Right_Port,Motor_Right_pin0,DIO_OUTPUT);
 912:	41 e0       	ldi	r20, 0x01	; 1
 914:	62 e0       	ldi	r22, 0x02	; 2
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(Motor_Right_Port,Motor_Right_pin1,DIO_OUTPUT);
 91c:	41 e0       	ldi	r20, 0x01	; 1
 91e:	63 e0       	ldi	r22, 0x03	; 3
 920:	83 e0       	ldi	r24, 0x03	; 3
 922:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 926:	08 95       	ret

00000928 <MOTOR_Right_Forward>:
	
}
void MOTOR_Right_Forward(){
	DIO_SetPinDirection(Motor_Right_Port,Motor_Right_pin0,DIO_LOW);
 928:	40 e0       	ldi	r20, 0x00	; 0
 92a:	62 e0       	ldi	r22, 0x02	; 2
 92c:	83 e0       	ldi	r24, 0x03	; 3
 92e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(Motor_Right_Port,Motor_Right_pin1,DIO_HIGH);
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	63 e0       	ldi	r22, 0x03	; 3
 936:	83 e0       	ldi	r24, 0x03	; 3
 938:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 93c:	08 95       	ret

0000093e <MOTOR_Right_Stop>:
}

void MOTOR_Right_Stop(){
	DIO_SetPinDirection(Motor_Right_Port,Motor_Right_pin0,DIO_LOW);
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	62 e0       	ldi	r22, 0x02	; 2
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(Motor_Right_Port,Motor_Right_pin1,DIO_LOW);
 948:	40 e0       	ldi	r20, 0x00	; 0
 94a:	63 e0       	ldi	r22, 0x03	; 3
 94c:	83 e0       	ldi	r24, 0x03	; 3
 94e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 952:	08 95       	ret

00000954 <SERVO_INIT>:
#include "SERVO.h"
#include "SERVO_Config.h"

void SERVO_INIT(){
	
	DIO_SetPinDirection(SERVO_PORT,SERVO_PIN,DIO_OUTPUT);
 954:	41 e0       	ldi	r20, 0x01	; 1
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_LOW);
 95e:	40 e0       	ldi	r20, 0x00	; 0
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
 968:	08 95       	ret

0000096a <SERVO_ROT_RIGHT>:
	
}

void SERVO_ROT_RIGHT(){
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_HIGH);
 96a:	41 e0       	ldi	r20, 0x01	; 1
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	82 e0       	ldi	r24, 0x02	; 2
 970:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 974:	83 ec       	ldi	r24, 0xC3	; 195
 976:	99 e0       	ldi	r25, 0x09	; 9
 978:	01 97       	sbiw	r24, 0x01	; 1
 97a:	f1 f7       	brne	.-4      	; 0x978 <SERVO_ROT_RIGHT+0xe>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <SERVO_ROT_RIGHT+0x14>
 97e:	00 00       	nop
	_delay_us(1250);
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_LOW);
 980:	40 e0       	ldi	r20, 0x00	; 0
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	21 e1       	ldi	r18, 0x11	; 17
 98e:	8a e7       	ldi	r24, 0x7A	; 122
 990:	91 50       	subi	r25, 0x01	; 1
 992:	20 40       	sbci	r18, 0x00	; 0
 994:	80 40       	sbci	r24, 0x00	; 0
 996:	e1 f7       	brne	.-8      	; 0x990 <SERVO_ROT_RIGHT+0x26>
 998:	00 c0       	rjmp	.+0      	; 0x99a <SERVO_ROT_RIGHT+0x30>
 99a:	00 00       	nop
 99c:	08 95       	ret

0000099e <SERVO_ROT_LEFT>:
	_delay_ms(5000);
}

void SERVO_ROT_LEFT(){
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_HIGH);
 99e:	41 e0       	ldi	r20, 0x01	; 1
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	82 e0       	ldi	r24, 0x02	; 2
 9a4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9a8:	8b ea       	ldi	r24, 0xAB	; 171
 9aa:	9d e0       	ldi	r25, 0x0D	; 13
 9ac:	01 97       	sbiw	r24, 0x01	; 1
 9ae:	f1 f7       	brne	.-4      	; 0x9ac <SERVO_ROT_LEFT+0xe>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <SERVO_ROT_LEFT+0x14>
 9b2:	00 00       	nop
	_delay_us(1750);
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_LOW);
 9b4:	40 e0       	ldi	r20, 0x00	; 0
 9b6:	60 e0       	ldi	r22, 0x00	; 0
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	21 e1       	ldi	r18, 0x11	; 17
 9c2:	8a e7       	ldi	r24, 0x7A	; 122
 9c4:	91 50       	subi	r25, 0x01	; 1
 9c6:	20 40       	sbci	r18, 0x00	; 0
 9c8:	80 40       	sbci	r24, 0x00	; 0
 9ca:	e1 f7       	brne	.-8      	; 0x9c4 <SERVO_ROT_LEFT+0x26>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <SERVO_ROT_LEFT+0x30>
 9ce:	00 00       	nop
 9d0:	08 95       	ret

000009d2 <SERVO_ROT_FORWARD>:
	_delay_ms(5000);	
}
void SERVO_ROT_FORWARD(){
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_HIGH);
 9d2:	41 e0       	ldi	r20, 0x01	; 1
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	82 e0       	ldi	r24, 0x02	; 2
 9d8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9dc:	8b eb       	ldi	r24, 0xBB	; 187
 9de:	97 e0       	ldi	r25, 0x07	; 7
 9e0:	01 97       	sbiw	r24, 0x01	; 1
 9e2:	f1 f7       	brne	.-4      	; 0x9e0 <SERVO_ROT_FORWARD+0xe>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <SERVO_ROT_FORWARD+0x14>
 9e6:	00 00       	nop
	_delay_us(990);
	DIO_WritePinValue(SERVO_PORT,SERVO_PIN,DIO_LOW);
 9e8:	40 e0       	ldi	r20, 0x00	; 0
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	82 e0       	ldi	r24, 0x02	; 2
 9ee:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9f2:	9f ef       	ldi	r25, 0xFF	; 255
 9f4:	23 ed       	ldi	r18, 0xD3	; 211
 9f6:	80 e3       	ldi	r24, 0x30	; 48
 9f8:	91 50       	subi	r25, 0x01	; 1
 9fa:	20 40       	sbci	r18, 0x00	; 0
 9fc:	80 40       	sbci	r24, 0x00	; 0
 9fe:	e1 f7       	brne	.-8      	; 0x9f8 <SERVO_ROT_FORWARD+0x26>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <SERVO_ROT_FORWARD+0x30>
 a02:	00 00       	nop
 a04:	08 95       	ret

00000a06 <__subsf3>:
 a06:	50 58       	subi	r21, 0x80	; 128

00000a08 <__addsf3>:
 a08:	bb 27       	eor	r27, r27
 a0a:	aa 27       	eor	r26, r26
 a0c:	0e 94 1b 05 	call	0xa36	; 0xa36 <__addsf3x>
 a10:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_round>
 a14:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscA>
 a18:	38 f0       	brcs	.+14     	; 0xa28 <__addsf3+0x20>
 a1a:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_pscB>
 a1e:	20 f0       	brcs	.+8      	; 0xa28 <__addsf3+0x20>
 a20:	39 f4       	brne	.+14     	; 0xa30 <__addsf3+0x28>
 a22:	9f 3f       	cpi	r25, 0xFF	; 255
 a24:	19 f4       	brne	.+6      	; 0xa2c <__addsf3+0x24>
 a26:	26 f4       	brtc	.+8      	; 0xa30 <__addsf3+0x28>
 a28:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_nan>
 a2c:	0e f4       	brtc	.+2      	; 0xa30 <__addsf3+0x28>
 a2e:	e0 95       	com	r30
 a30:	e7 fb       	bst	r30, 7
 a32:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_inf>

00000a36 <__addsf3x>:
 a36:	e9 2f       	mov	r30, r25
 a38:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_split3>
 a3c:	58 f3       	brcs	.-42     	; 0xa14 <__addsf3+0xc>
 a3e:	ba 17       	cp	r27, r26
 a40:	62 07       	cpc	r22, r18
 a42:	73 07       	cpc	r23, r19
 a44:	84 07       	cpc	r24, r20
 a46:	95 07       	cpc	r25, r21
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__addsf3x+0x1c>
 a4a:	79 f4       	brne	.+30     	; 0xa6a <__addsf3x+0x34>
 a4c:	a6 f5       	brtc	.+104    	; 0xab6 <__addsf3x+0x80>
 a4e:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_zero>
 a52:	0e f4       	brtc	.+2      	; 0xa56 <__addsf3x+0x20>
 a54:	e0 95       	com	r30
 a56:	0b 2e       	mov	r0, r27
 a58:	ba 2f       	mov	r27, r26
 a5a:	a0 2d       	mov	r26, r0
 a5c:	0b 01       	movw	r0, r22
 a5e:	b9 01       	movw	r22, r18
 a60:	90 01       	movw	r18, r0
 a62:	0c 01       	movw	r0, r24
 a64:	ca 01       	movw	r24, r20
 a66:	a0 01       	movw	r20, r0
 a68:	11 24       	eor	r1, r1
 a6a:	ff 27       	eor	r31, r31
 a6c:	59 1b       	sub	r21, r25
 a6e:	99 f0       	breq	.+38     	; 0xa96 <__addsf3x+0x60>
 a70:	59 3f       	cpi	r21, 0xF9	; 249
 a72:	50 f4       	brcc	.+20     	; 0xa88 <__addsf3x+0x52>
 a74:	50 3e       	cpi	r21, 0xE0	; 224
 a76:	68 f1       	brcs	.+90     	; 0xad2 <__addsf3x+0x9c>
 a78:	1a 16       	cp	r1, r26
 a7a:	f0 40       	sbci	r31, 0x00	; 0
 a7c:	a2 2f       	mov	r26, r18
 a7e:	23 2f       	mov	r18, r19
 a80:	34 2f       	mov	r19, r20
 a82:	44 27       	eor	r20, r20
 a84:	58 5f       	subi	r21, 0xF8	; 248
 a86:	f3 cf       	rjmp	.-26     	; 0xa6e <__addsf3x+0x38>
 a88:	46 95       	lsr	r20
 a8a:	37 95       	ror	r19
 a8c:	27 95       	ror	r18
 a8e:	a7 95       	ror	r26
 a90:	f0 40       	sbci	r31, 0x00	; 0
 a92:	53 95       	inc	r21
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__addsf3x+0x52>
 a96:	7e f4       	brtc	.+30     	; 0xab6 <__addsf3x+0x80>
 a98:	1f 16       	cp	r1, r31
 a9a:	ba 0b       	sbc	r27, r26
 a9c:	62 0b       	sbc	r22, r18
 a9e:	73 0b       	sbc	r23, r19
 aa0:	84 0b       	sbc	r24, r20
 aa2:	ba f0       	brmi	.+46     	; 0xad2 <__addsf3x+0x9c>
 aa4:	91 50       	subi	r25, 0x01	; 1
 aa6:	a1 f0       	breq	.+40     	; 0xad0 <__addsf3x+0x9a>
 aa8:	ff 0f       	add	r31, r31
 aaa:	bb 1f       	adc	r27, r27
 aac:	66 1f       	adc	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	c2 f7       	brpl	.-16     	; 0xaa4 <__addsf3x+0x6e>
 ab4:	0e c0       	rjmp	.+28     	; 0xad2 <__addsf3x+0x9c>
 ab6:	ba 0f       	add	r27, r26
 ab8:	62 1f       	adc	r22, r18
 aba:	73 1f       	adc	r23, r19
 abc:	84 1f       	adc	r24, r20
 abe:	48 f4       	brcc	.+18     	; 0xad2 <__addsf3x+0x9c>
 ac0:	87 95       	ror	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b7 95       	ror	r27
 ac8:	f7 95       	ror	r31
 aca:	9e 3f       	cpi	r25, 0xFE	; 254
 acc:	08 f0       	brcs	.+2      	; 0xad0 <__addsf3x+0x9a>
 ace:	b0 cf       	rjmp	.-160    	; 0xa30 <__addsf3+0x28>
 ad0:	93 95       	inc	r25
 ad2:	88 0f       	add	r24, r24
 ad4:	08 f0       	brcs	.+2      	; 0xad8 <__addsf3x+0xa2>
 ad6:	99 27       	eor	r25, r25
 ad8:	ee 0f       	add	r30, r30
 ada:	97 95       	ror	r25
 adc:	87 95       	ror	r24
 ade:	08 95       	ret

00000ae0 <__divsf3>:
 ae0:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3x>
 ae4:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_round>
 ae8:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_pscB>
 aec:	58 f0       	brcs	.+22     	; 0xb04 <__divsf3+0x24>
 aee:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_pscA>
 af2:	40 f0       	brcs	.+16     	; 0xb04 <__divsf3+0x24>
 af4:	29 f4       	brne	.+10     	; 0xb00 <__divsf3+0x20>
 af6:	5f 3f       	cpi	r21, 0xFF	; 255
 af8:	29 f0       	breq	.+10     	; 0xb04 <__divsf3+0x24>
 afa:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_inf>
 afe:	51 11       	cpse	r21, r1
 b00:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_szero>
 b04:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_nan>

00000b08 <__divsf3x>:
 b08:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_split3>
 b0c:	68 f3       	brcs	.-38     	; 0xae8 <__divsf3+0x8>

00000b0e <__divsf3_pse>:
 b0e:	99 23       	and	r25, r25
 b10:	b1 f3       	breq	.-20     	; 0xafe <__divsf3+0x1e>
 b12:	55 23       	and	r21, r21
 b14:	91 f3       	breq	.-28     	; 0xafa <__divsf3+0x1a>
 b16:	95 1b       	sub	r25, r21
 b18:	55 0b       	sbc	r21, r21
 b1a:	bb 27       	eor	r27, r27
 b1c:	aa 27       	eor	r26, r26
 b1e:	62 17       	cp	r22, r18
 b20:	73 07       	cpc	r23, r19
 b22:	84 07       	cpc	r24, r20
 b24:	38 f0       	brcs	.+14     	; 0xb34 <__divsf3_pse+0x26>
 b26:	9f 5f       	subi	r25, 0xFF	; 255
 b28:	5f 4f       	sbci	r21, 0xFF	; 255
 b2a:	22 0f       	add	r18, r18
 b2c:	33 1f       	adc	r19, r19
 b2e:	44 1f       	adc	r20, r20
 b30:	aa 1f       	adc	r26, r26
 b32:	a9 f3       	breq	.-22     	; 0xb1e <__divsf3_pse+0x10>
 b34:	35 d0       	rcall	.+106    	; 0xba0 <__divsf3_pse+0x92>
 b36:	0e 2e       	mov	r0, r30
 b38:	3a f0       	brmi	.+14     	; 0xb48 <__divsf3_pse+0x3a>
 b3a:	e0 e8       	ldi	r30, 0x80	; 128
 b3c:	32 d0       	rcall	.+100    	; 0xba2 <__divsf3_pse+0x94>
 b3e:	91 50       	subi	r25, 0x01	; 1
 b40:	50 40       	sbci	r21, 0x00	; 0
 b42:	e6 95       	lsr	r30
 b44:	00 1c       	adc	r0, r0
 b46:	ca f7       	brpl	.-14     	; 0xb3a <__divsf3_pse+0x2c>
 b48:	2b d0       	rcall	.+86     	; 0xba0 <__divsf3_pse+0x92>
 b4a:	fe 2f       	mov	r31, r30
 b4c:	29 d0       	rcall	.+82     	; 0xba0 <__divsf3_pse+0x92>
 b4e:	66 0f       	add	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	bb 1f       	adc	r27, r27
 b56:	26 17       	cp	r18, r22
 b58:	37 07       	cpc	r19, r23
 b5a:	48 07       	cpc	r20, r24
 b5c:	ab 07       	cpc	r26, r27
 b5e:	b0 e8       	ldi	r27, 0x80	; 128
 b60:	09 f0       	breq	.+2      	; 0xb64 <__divsf3_pse+0x56>
 b62:	bb 0b       	sbc	r27, r27
 b64:	80 2d       	mov	r24, r0
 b66:	bf 01       	movw	r22, r30
 b68:	ff 27       	eor	r31, r31
 b6a:	93 58       	subi	r25, 0x83	; 131
 b6c:	5f 4f       	sbci	r21, 0xFF	; 255
 b6e:	3a f0       	brmi	.+14     	; 0xb7e <__divsf3_pse+0x70>
 b70:	9e 3f       	cpi	r25, 0xFE	; 254
 b72:	51 05       	cpc	r21, r1
 b74:	78 f0       	brcs	.+30     	; 0xb94 <__divsf3_pse+0x86>
 b76:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_inf>
 b7a:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_szero>
 b7e:	5f 3f       	cpi	r21, 0xFF	; 255
 b80:	e4 f3       	brlt	.-8      	; 0xb7a <__divsf3_pse+0x6c>
 b82:	98 3e       	cpi	r25, 0xE8	; 232
 b84:	d4 f3       	brlt	.-12     	; 0xb7a <__divsf3_pse+0x6c>
 b86:	86 95       	lsr	r24
 b88:	77 95       	ror	r23
 b8a:	67 95       	ror	r22
 b8c:	b7 95       	ror	r27
 b8e:	f7 95       	ror	r31
 b90:	9f 5f       	subi	r25, 0xFF	; 255
 b92:	c9 f7       	brne	.-14     	; 0xb86 <__divsf3_pse+0x78>
 b94:	88 0f       	add	r24, r24
 b96:	91 1d       	adc	r25, r1
 b98:	96 95       	lsr	r25
 b9a:	87 95       	ror	r24
 b9c:	97 f9       	bld	r25, 7
 b9e:	08 95       	ret
 ba0:	e1 e0       	ldi	r30, 0x01	; 1
 ba2:	66 0f       	add	r22, r22
 ba4:	77 1f       	adc	r23, r23
 ba6:	88 1f       	adc	r24, r24
 ba8:	bb 1f       	adc	r27, r27
 baa:	62 17       	cp	r22, r18
 bac:	73 07       	cpc	r23, r19
 bae:	84 07       	cpc	r24, r20
 bb0:	ba 07       	cpc	r27, r26
 bb2:	20 f0       	brcs	.+8      	; 0xbbc <__divsf3_pse+0xae>
 bb4:	62 1b       	sub	r22, r18
 bb6:	73 0b       	sbc	r23, r19
 bb8:	84 0b       	sbc	r24, r20
 bba:	ba 0b       	sbc	r27, r26
 bbc:	ee 1f       	adc	r30, r30
 bbe:	88 f7       	brcc	.-30     	; 0xba2 <__divsf3_pse+0x94>
 bc0:	e0 95       	com	r30
 bc2:	08 95       	ret

00000bc4 <__fixsfsi>:
 bc4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fixunssfsi>
 bc8:	68 94       	set
 bca:	b1 11       	cpse	r27, r1
 bcc:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_szero>
 bd0:	08 95       	ret

00000bd2 <__fixunssfsi>:
 bd2:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_splitA>
 bd6:	88 f0       	brcs	.+34     	; 0xbfa <__fixunssfsi+0x28>
 bd8:	9f 57       	subi	r25, 0x7F	; 127
 bda:	98 f0       	brcs	.+38     	; 0xc02 <__fixunssfsi+0x30>
 bdc:	b9 2f       	mov	r27, r25
 bde:	99 27       	eor	r25, r25
 be0:	b7 51       	subi	r27, 0x17	; 23
 be2:	b0 f0       	brcs	.+44     	; 0xc10 <__fixunssfsi+0x3e>
 be4:	e1 f0       	breq	.+56     	; 0xc1e <__fixunssfsi+0x4c>
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	99 1f       	adc	r25, r25
 bee:	1a f0       	brmi	.+6      	; 0xbf6 <__fixunssfsi+0x24>
 bf0:	ba 95       	dec	r27
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__fixunssfsi+0x14>
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <__fixunssfsi+0x4c>
 bf6:	b1 30       	cpi	r27, 0x01	; 1
 bf8:	91 f0       	breq	.+36     	; 0xc1e <__fixunssfsi+0x4c>
 bfa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_zero>
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	08 95       	ret
 c02:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_zero>
 c06:	67 2f       	mov	r22, r23
 c08:	78 2f       	mov	r23, r24
 c0a:	88 27       	eor	r24, r24
 c0c:	b8 5f       	subi	r27, 0xF8	; 248
 c0e:	39 f0       	breq	.+14     	; 0xc1e <__fixunssfsi+0x4c>
 c10:	b9 3f       	cpi	r27, 0xF9	; 249
 c12:	cc f3       	brlt	.-14     	; 0xc06 <__fixunssfsi+0x34>
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b3 95       	inc	r27
 c1c:	d9 f7       	brne	.-10     	; 0xc14 <__fixunssfsi+0x42>
 c1e:	3e f4       	brtc	.+14     	; 0xc2e <__fixunssfsi+0x5c>
 c20:	90 95       	com	r25
 c22:	80 95       	com	r24
 c24:	70 95       	com	r23
 c26:	61 95       	neg	r22
 c28:	7f 4f       	sbci	r23, 0xFF	; 255
 c2a:	8f 4f       	sbci	r24, 0xFF	; 255
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__floatunsisf>:
 c30:	e8 94       	clt
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <__floatsisf+0x12>

00000c34 <__floatsisf>:
 c34:	97 fb       	bst	r25, 7
 c36:	3e f4       	brtc	.+14     	; 0xc46 <__floatsisf+0x12>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	99 23       	and	r25, r25
 c48:	a9 f0       	breq	.+42     	; 0xc74 <__floatsisf+0x40>
 c4a:	f9 2f       	mov	r31, r25
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	bb 27       	eor	r27, r27
 c50:	93 95       	inc	r25
 c52:	f6 95       	lsr	r31
 c54:	87 95       	ror	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f1 11       	cpse	r31, r1
 c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <__floatsisf+0x1c>
 c60:	fa f4       	brpl	.+62     	; 0xca0 <__floatsisf+0x6c>
 c62:	bb 0f       	add	r27, r27
 c64:	11 f4       	brne	.+4      	; 0xc6a <__floatsisf+0x36>
 c66:	60 ff       	sbrs	r22, 0
 c68:	1b c0       	rjmp	.+54     	; 0xca0 <__floatsisf+0x6c>
 c6a:	6f 5f       	subi	r22, 0xFF	; 255
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <__floatsisf+0x6c>
 c74:	88 23       	and	r24, r24
 c76:	11 f0       	breq	.+4      	; 0xc7c <__floatsisf+0x48>
 c78:	96 e9       	ldi	r25, 0x96	; 150
 c7a:	11 c0       	rjmp	.+34     	; 0xc9e <__floatsisf+0x6a>
 c7c:	77 23       	and	r23, r23
 c7e:	21 f0       	breq	.+8      	; 0xc88 <__floatsisf+0x54>
 c80:	9e e8       	ldi	r25, 0x8E	; 142
 c82:	87 2f       	mov	r24, r23
 c84:	76 2f       	mov	r23, r22
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <__floatsisf+0x5e>
 c88:	66 23       	and	r22, r22
 c8a:	71 f0       	breq	.+28     	; 0xca8 <__floatsisf+0x74>
 c8c:	96 e8       	ldi	r25, 0x86	; 134
 c8e:	86 2f       	mov	r24, r22
 c90:	70 e0       	ldi	r23, 0x00	; 0
 c92:	60 e0       	ldi	r22, 0x00	; 0
 c94:	2a f0       	brmi	.+10     	; 0xca0 <__floatsisf+0x6c>
 c96:	9a 95       	dec	r25
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	da f7       	brpl	.-10     	; 0xc96 <__floatsisf+0x62>
 ca0:	88 0f       	add	r24, r24
 ca2:	96 95       	lsr	r25
 ca4:	87 95       	ror	r24
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret

00000caa <__fp_inf>:
 caa:	97 f9       	bld	r25, 7
 cac:	9f 67       	ori	r25, 0x7F	; 127
 cae:	80 e8       	ldi	r24, 0x80	; 128
 cb0:	70 e0       	ldi	r23, 0x00	; 0
 cb2:	60 e0       	ldi	r22, 0x00	; 0
 cb4:	08 95       	ret

00000cb6 <__fp_nan>:
 cb6:	9f ef       	ldi	r25, 0xFF	; 255
 cb8:	80 ec       	ldi	r24, 0xC0	; 192
 cba:	08 95       	ret

00000cbc <__fp_pscA>:
 cbc:	00 24       	eor	r0, r0
 cbe:	0a 94       	dec	r0
 cc0:	16 16       	cp	r1, r22
 cc2:	17 06       	cpc	r1, r23
 cc4:	18 06       	cpc	r1, r24
 cc6:	09 06       	cpc	r0, r25
 cc8:	08 95       	ret

00000cca <__fp_pscB>:
 cca:	00 24       	eor	r0, r0
 ccc:	0a 94       	dec	r0
 cce:	12 16       	cp	r1, r18
 cd0:	13 06       	cpc	r1, r19
 cd2:	14 06       	cpc	r1, r20
 cd4:	05 06       	cpc	r0, r21
 cd6:	08 95       	ret

00000cd8 <__fp_round>:
 cd8:	09 2e       	mov	r0, r25
 cda:	03 94       	inc	r0
 cdc:	00 0c       	add	r0, r0
 cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0xc>
 ce0:	88 23       	and	r24, r24
 ce2:	52 f0       	brmi	.+20     	; 0xcf8 <__fp_round+0x20>
 ce4:	bb 0f       	add	r27, r27
 ce6:	40 f4       	brcc	.+16     	; 0xcf8 <__fp_round+0x20>
 ce8:	bf 2b       	or	r27, r31
 cea:	11 f4       	brne	.+4      	; 0xcf0 <__fp_round+0x18>
 cec:	60 ff       	sbrs	r22, 0
 cee:	04 c0       	rjmp	.+8      	; 0xcf8 <__fp_round+0x20>
 cf0:	6f 5f       	subi	r22, 0xFF	; 255
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255
 cf4:	8f 4f       	sbci	r24, 0xFF	; 255
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	08 95       	ret

00000cfa <__fp_split3>:
 cfa:	57 fd       	sbrc	r21, 7
 cfc:	90 58       	subi	r25, 0x80	; 128
 cfe:	44 0f       	add	r20, r20
 d00:	55 1f       	adc	r21, r21
 d02:	59 f0       	breq	.+22     	; 0xd1a <__fp_splitA+0x10>
 d04:	5f 3f       	cpi	r21, 0xFF	; 255
 d06:	71 f0       	breq	.+28     	; 0xd24 <__fp_splitA+0x1a>
 d08:	47 95       	ror	r20

00000d0a <__fp_splitA>:
 d0a:	88 0f       	add	r24, r24
 d0c:	97 fb       	bst	r25, 7
 d0e:	99 1f       	adc	r25, r25
 d10:	61 f0       	breq	.+24     	; 0xd2a <__fp_splitA+0x20>
 d12:	9f 3f       	cpi	r25, 0xFF	; 255
 d14:	79 f0       	breq	.+30     	; 0xd34 <__fp_splitA+0x2a>
 d16:	87 95       	ror	r24
 d18:	08 95       	ret
 d1a:	12 16       	cp	r1, r18
 d1c:	13 06       	cpc	r1, r19
 d1e:	14 06       	cpc	r1, r20
 d20:	55 1f       	adc	r21, r21
 d22:	f2 cf       	rjmp	.-28     	; 0xd08 <__fp_split3+0xe>
 d24:	46 95       	lsr	r20
 d26:	f1 df       	rcall	.-30     	; 0xd0a <__fp_splitA>
 d28:	08 c0       	rjmp	.+16     	; 0xd3a <__fp_splitA+0x30>
 d2a:	16 16       	cp	r1, r22
 d2c:	17 06       	cpc	r1, r23
 d2e:	18 06       	cpc	r1, r24
 d30:	99 1f       	adc	r25, r25
 d32:	f1 cf       	rjmp	.-30     	; 0xd16 <__fp_splitA+0xc>
 d34:	86 95       	lsr	r24
 d36:	71 05       	cpc	r23, r1
 d38:	61 05       	cpc	r22, r1
 d3a:	08 94       	sec
 d3c:	08 95       	ret

00000d3e <__fp_zero>:
 d3e:	e8 94       	clt

00000d40 <__fp_szero>:
 d40:	bb 27       	eor	r27, r27
 d42:	66 27       	eor	r22, r22
 d44:	77 27       	eor	r23, r23
 d46:	cb 01       	movw	r24, r22
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <itoa>:
 d4c:	45 32       	cpi	r20, 0x25	; 37
 d4e:	51 05       	cpc	r21, r1
 d50:	20 f4       	brcc	.+8      	; 0xd5a <itoa+0xe>
 d52:	42 30       	cpi	r20, 0x02	; 2
 d54:	10 f0       	brcs	.+4      	; 0xd5a <itoa+0xe>
 d56:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__itoa_ncheck>
 d5a:	fb 01       	movw	r30, r22
 d5c:	10 82       	st	Z, r1
 d5e:	cb 01       	movw	r24, r22
 d60:	08 95       	ret

00000d62 <__itoa_ncheck>:
 d62:	bb 27       	eor	r27, r27
 d64:	4a 30       	cpi	r20, 0x0A	; 10
 d66:	31 f4       	brne	.+12     	; 0xd74 <__itoa_ncheck+0x12>
 d68:	99 23       	and	r25, r25
 d6a:	22 f4       	brpl	.+8      	; 0xd74 <__itoa_ncheck+0x12>
 d6c:	bd e2       	ldi	r27, 0x2D	; 45
 d6e:	90 95       	com	r25
 d70:	81 95       	neg	r24
 d72:	9f 4f       	sbci	r25, 0xFF	; 255
 d74:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__utoa_common>

00000d78 <__utoa_ncheck>:
 d78:	bb 27       	eor	r27, r27

00000d7a <__utoa_common>:
 d7a:	fb 01       	movw	r30, r22
 d7c:	55 27       	eor	r21, r21
 d7e:	aa 27       	eor	r26, r26
 d80:	88 0f       	add	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	aa 1f       	adc	r26, r26
 d86:	a4 17       	cp	r26, r20
 d88:	10 f0       	brcs	.+4      	; 0xd8e <__utoa_common+0x14>
 d8a:	a4 1b       	sub	r26, r20
 d8c:	83 95       	inc	r24
 d8e:	50 51       	subi	r21, 0x10	; 16
 d90:	b9 f7       	brne	.-18     	; 0xd80 <__utoa_common+0x6>
 d92:	a0 5d       	subi	r26, 0xD0	; 208
 d94:	aa 33       	cpi	r26, 0x3A	; 58
 d96:	08 f0       	brcs	.+2      	; 0xd9a <__utoa_common+0x20>
 d98:	a9 5d       	subi	r26, 0xD9	; 217
 d9a:	a1 93       	st	Z+, r26
 d9c:	00 97       	sbiw	r24, 0x00	; 0
 d9e:	79 f7       	brne	.-34     	; 0xd7e <__utoa_common+0x4>
 da0:	b1 11       	cpse	r27, r1
 da2:	b1 93       	st	Z+, r27
 da4:	11 92       	st	Z+, r1
 da6:	cb 01       	movw	r24, r22
 da8:	0c 94 d6 06 	jmp	0xdac	; 0xdac <strrev>

00000dac <strrev>:
 dac:	dc 01       	movw	r26, r24
 dae:	fc 01       	movw	r30, r24
 db0:	67 2f       	mov	r22, r23
 db2:	71 91       	ld	r23, Z+
 db4:	77 23       	and	r23, r23
 db6:	e1 f7       	brne	.-8      	; 0xdb0 <strrev+0x4>
 db8:	32 97       	sbiw	r30, 0x02	; 2
 dba:	04 c0       	rjmp	.+8      	; 0xdc4 <strrev+0x18>
 dbc:	7c 91       	ld	r23, X
 dbe:	6d 93       	st	X+, r22
 dc0:	70 83       	st	Z, r23
 dc2:	62 91       	ld	r22, -Z
 dc4:	ae 17       	cp	r26, r30
 dc6:	bf 07       	cpc	r27, r31
 dc8:	c8 f3       	brcs	.-14     	; 0xdbc <strrev+0x10>
 dca:	08 95       	ret

00000dcc <_exit>:
 dcc:	f8 94       	cli

00000dce <__stop_program>:
 dce:	ff cf       	rjmp	.-2      	; 0xdce <__stop_program>
